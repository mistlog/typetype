{
    "kind": "TypeFunctionDeclaration",
    "declarator": {
        "kind": "TypeFunctionDeclarator",
        "name": {
            "kind": "Identifier",
            "name": "ParseURL"
        },
        "initializer": {
            "kind": "TypeArrowFunctionExpression",
            "params": [
                {
                    "kind": "TypeReference",
                    "typeName": {
                        "kind": "Identifier",
                        "name": "text"
                    },
                    "constraint": null
                }
            ],
            "body": {
                "kind": "ConditionalTypeExpression",
                "body": {
                    "kind": "TypeIfStatement",
                    "condition": {
                        "kind": "ExtendsClause",
                        "checkType": {
                            "kind": "TypeReference",
                            "typeName": {
                                "kind": "Identifier",
                                "name": "text"
                            }
                        },
                        "extendsType": {
                            "kind": "InferType",
                            "typeName": {
                                "kind": "Identifier",
                                "name": "protocal"
                            }
                        }
                    },
                    "consequent": {
                        "kind": "TypeReturnStatement",
                        "argument": {
                            "kind": "StringTypeLiteral",
                            "value": "string"
                        }
                    },
                    "alternate": {
                        "kind": "TypeReturnStatement",
                        "argument": {
                            "kind": "StringTypeLiteral",
                            "value": "number"
                        }
                    }
                }
            }
        }
    },
    "export": false
}