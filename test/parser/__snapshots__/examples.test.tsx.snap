// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parser: examples _isNumberString 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "alternate": Object {
              "argument": Object {
                "kind": "BooleanTypeLiteral",
                "value": false,
              },
              "kind": "TypeReturnStatement",
            },
            "condition": Object {
              "checkType": Object {
                "kind": "TypeReference",
                "typeName": Object {
                  "kind": "Identifier",
                  "name": "text",
                },
              },
              "extendsType": Object {
                "items": Array [
                  Object {
                    "expression": Object {
                      "kind": "InferType",
                      "typeName": Object {
                        "kind": "Identifier",
                        "name": "digit",
                      },
                    },
                    "kind": "TemplateExpression",
                  },
                  Object {
                    "expression": Object {
                      "kind": "InferType",
                      "typeName": Object {
                        "kind": "Identifier",
                        "name": "rest",
                      },
                    },
                    "kind": "TemplateExpression",
                  },
                ],
                "kind": "TemplateTypeLiteral",
              },
              "kind": "ExtendsClause",
            },
            "consequent": Object {
              "argument": Object {
                "body": Object {
                  "alternate": Object {
                    "argument": Object {
                      "kind": "BooleanTypeLiteral",
                      "value": false,
                    },
                    "kind": "TypeReturnStatement",
                  },
                  "condition": Object {
                    "checkType": Object {
                      "kind": "TypeReference",
                      "typeName": Object {
                        "kind": "Identifier",
                        "name": "digit",
                      },
                    },
                    "extendsType": Object {
                      "kind": "TypeReference",
                      "typeName": Object {
                        "kind": "Identifier",
                        "name": "Digit",
                      },
                    },
                    "kind": "ExtendsClause",
                  },
                  "consequent": Object {
                    "argument": Object {
                      "callee": Object {
                        "kind": "TypeReference",
                        "typeName": Object {
                          "kind": "Identifier",
                          "name": "_isNumberString",
                        },
                      },
                      "kind": "TypeCallExpression",
                      "params": Array [
                        Object {
                          "kind": "TypeReference",
                          "typeName": Object {
                            "kind": "Identifier",
                            "name": "rest",
                          },
                        },
                      ],
                    },
                    "kind": "TypeReturnStatement",
                  },
                  "kind": "TypeIfStatement",
                },
                "kind": "ConditionalTypeExpression",
              },
              "kind": "TypeReturnStatement",
            },
            "kind": "TypeIfStatement",
          },
          "condition": Object {
            "checkType": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "text",
              },
            },
            "extendsType": Object {
              "kind": "StringTypeLiteral",
              "value": "",
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "kind": "BooleanTypeLiteral",
              "value": true,
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "text",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "_isNumberString",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`parser: examples comment 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "alternate": Object {
              "argument": Object {
                "kind": "BooleanTypeLiteral",
                "value": false,
              },
              "kind": "TypeReturnStatement",
            },
            "condition": Object {
              "checkType": Object {
                "kind": "TypeReference",
                "typeName": Object {
                  "kind": "Identifier",
                  "name": "text",
                },
              },
              "extendsType": Object {
                "items": Array [
                  Object {
                    "expression": Object {
                      "kind": "InferType",
                      "typeName": Object {
                        "kind": "Identifier",
                        "name": "digit",
                      },
                    },
                    "kind": "TemplateExpression",
                  },
                  Object {
                    "expression": Object {
                      "kind": "InferType",
                      "typeName": Object {
                        "kind": "Identifier",
                        "name": "rest",
                      },
                    },
                    "kind": "TemplateExpression",
                  },
                ],
                "kind": "TemplateTypeLiteral",
              },
              "kind": "ExtendsClause",
            },
            "consequent": Object {
              "argument": Object {
                "body": Object {
                  "alternate": Object {
                    "argument": Object {
                      "kind": "BooleanTypeLiteral",
                      "value": false,
                    },
                    "kind": "TypeReturnStatement",
                  },
                  "condition": Object {
                    "checkType": Object {
                      "kind": "TypeReference",
                      "typeName": Object {
                        "kind": "Identifier",
                        "name": "digit",
                      },
                    },
                    "extendsType": Object {
                      "kind": "TypeReference",
                      "typeName": Object {
                        "kind": "Identifier",
                        "name": "Digit",
                      },
                    },
                    "kind": "ExtendsClause",
                  },
                  "consequent": Object {
                    "argument": Object {
                      "callee": Object {
                        "kind": "TypeReference",
                        "typeName": Object {
                          "kind": "Identifier",
                          "name": "_isNumberString",
                        },
                      },
                      "kind": "TypeCallExpression",
                      "params": Array [
                        Object {
                          "kind": "TypeReference",
                          "typeName": Object {
                            "kind": "Identifier",
                            "name": "rest",
                          },
                        },
                      ],
                    },
                    "kind": "TypeReturnStatement",
                  },
                  "kind": "TypeIfStatement",
                },
                "kind": "ConditionalTypeExpression",
              },
              "kind": "TypeReturnStatement",
            },
            "kind": "TypeIfStatement",
          },
          "condition": Object {
            "checkType": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "text",
              },
            },
            "extendsType": Object {
              "kind": "StringTypeLiteral",
              "value": "",
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "kind": "BooleanTypeLiteral",
              "value": true,
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "text",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "_isNumberString",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`parser: examples isNumberString 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "argument": Object {
              "callee": Object {
                "kind": "TypeReference",
                "typeName": Object {
                  "kind": "Identifier",
                  "name": "_isNumberString",
                },
              },
              "kind": "TypeCallExpression",
              "params": Array [
                Object {
                  "kind": "TypeReference",
                  "typeName": Object {
                    "kind": "Identifier",
                    "name": "text",
                  },
                },
              ],
            },
            "kind": "TypeReturnStatement",
          },
          "condition": Object {
            "checkType": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "text",
              },
            },
            "extendsType": Object {
              "kind": "StringTypeLiteral",
              "value": "",
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "kind": "NeverType",
              "value": "never",
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "text",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "isNumberString",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`parser: examples parseAuthority 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "argument": Object {
              "kind": "ObjectTypeLiteral",
              "props": Array [
                Object {
                  "kind": "TypeObjectProperty",
                  "name": Object {
                    "kind": "Identifier",
                    "name": "authority",
                  },
                  "optional": false,
                  "readonly": false,
                  "value": Object {
                    "kind": "TypeReference",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "null",
                    },
                  },
                },
                Object {
                  "kind": "TypeObjectProperty",
                  "name": Object {
                    "kind": "Identifier",
                    "name": "rest",
                  },
                  "optional": false,
                  "readonly": false,
                  "value": Object {
                    "kind": "TypeReference",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "text",
                    },
                  },
                },
              ],
            },
            "kind": "TypeReturnStatement",
          },
          "condition": Object {
            "checkType": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "text",
              },
            },
            "extendsType": Object {
              "items": Array [
                Object {
                  "expression": Object {
                    "kind": "InferType",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "authority",
                    },
                  },
                  "kind": "TemplateExpression",
                },
                Object {
                  "kind": "TemplateElement",
                  "value": "@",
                },
                Object {
                  "expression": Object {
                    "kind": "InferType",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "rest",
                    },
                  },
                  "kind": "TemplateExpression",
                },
              ],
              "kind": "TemplateTypeLiteral",
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "kind": "ObjectTypeLiteral",
              "props": Array [
                Object {
                  "kind": "TypeObjectProperty",
                  "name": Object {
                    "kind": "Identifier",
                    "name": "authority",
                  },
                  "optional": false,
                  "readonly": false,
                  "value": Object {
                    "callee": Object {
                      "kind": "TypeReference",
                      "typeName": Object {
                        "kind": "Identifier",
                        "name": "parseUserInfo",
                      },
                    },
                    "kind": "TypeCallExpression",
                    "params": Array [
                      Object {
                        "kind": "TypeReference",
                        "typeName": Object {
                          "kind": "Identifier",
                          "name": "authority",
                        },
                      },
                    ],
                  },
                },
                Object {
                  "kind": "TypeObjectProperty",
                  "name": Object {
                    "kind": "Identifier",
                    "name": "rest",
                  },
                  "optional": false,
                  "readonly": false,
                  "value": Object {
                    "kind": "TypeReference",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "rest",
                    },
                  },
                },
              ],
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "text",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "parseAuthority",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`parser: examples parseHost 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "argument": Object {
              "kind": "ObjectTypeLiteral",
              "props": Array [
                Object {
                  "kind": "TypeObjectProperty",
                  "name": Object {
                    "kind": "Identifier",
                    "name": "name",
                  },
                  "optional": false,
                  "readonly": false,
                  "value": Object {
                    "kind": "TypeReference",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "text",
                    },
                  },
                },
              ],
            },
            "kind": "TypeReturnStatement",
          },
          "condition": Object {
            "checkType": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "text",
              },
            },
            "extendsType": Object {
              "items": Array [
                Object {
                  "expression": Object {
                    "kind": "InferType",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "name",
                    },
                  },
                  "kind": "TemplateExpression",
                },
                Object {
                  "kind": "TemplateElement",
                  "value": ":",
                },
                Object {
                  "expression": Object {
                    "kind": "InferType",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "port",
                    },
                  },
                  "kind": "TemplateExpression",
                },
              ],
              "kind": "TemplateTypeLiteral",
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "body": Object {
                "alternate": Object {
                  "argument": Object {
                    "kind": "ObjectTypeLiteral",
                    "props": Array [
                      Object {
                        "kind": "TypeObjectProperty",
                        "name": Object {
                          "kind": "Identifier",
                          "name": "name",
                        },
                        "optional": false,
                        "readonly": false,
                        "value": Object {
                          "kind": "TypeReference",
                          "typeName": Object {
                            "kind": "Identifier",
                            "name": "name",
                          },
                        },
                      },
                      Object {
                        "kind": "TypeObjectProperty",
                        "name": Object {
                          "kind": "Identifier",
                          "name": "port",
                        },
                        "optional": false,
                        "readonly": false,
                        "value": Object {
                          "kind": "TypeReference",
                          "typeName": Object {
                            "kind": "Identifier",
                            "name": "port",
                          },
                        },
                      },
                    ],
                  },
                  "kind": "TypeReturnStatement",
                },
                "condition": Object {
                  "checkType": Object {
                    "callee": Object {
                      "kind": "TypeReference",
                      "typeName": Object {
                        "kind": "Identifier",
                        "name": "parsePort",
                      },
                    },
                    "kind": "TypeCallExpression",
                    "params": Array [
                      Object {
                        "kind": "TypeReference",
                        "typeName": Object {
                          "kind": "Identifier",
                          "name": "port",
                        },
                      },
                    ],
                  },
                  "extendsType": Object {
                    "kind": "NeverType",
                    "value": "never",
                  },
                  "kind": "ExtendsClause",
                },
                "consequent": Object {
                  "argument": Object {
                    "kind": "NeverType",
                    "value": "never",
                  },
                  "kind": "TypeReturnStatement",
                },
                "kind": "TypeIfStatement",
              },
              "kind": "ConditionalTypeExpression",
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "text",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "parseHost",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`parser: examples parsePort 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "argument": Object {
              "kind": "NeverType",
              "value": "never",
            },
            "kind": "TypeReturnStatement",
          },
          "condition": Object {
            "checkType": Object {
              "callee": Object {
                "kind": "TypeReference",
                "typeName": Object {
                  "kind": "Identifier",
                  "name": "isNumberString",
                },
              },
              "kind": "TypeCallExpression",
              "params": Array [
                Object {
                  "kind": "TypeReference",
                  "typeName": Object {
                    "kind": "Identifier",
                    "name": "text",
                  },
                },
              ],
            },
            "extendsType": Object {
              "kind": "BooleanTypeLiteral",
              "value": true,
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "text",
              },
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "text",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "parsePort",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`parser: examples parseProtocol 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "argument": Object {
              "kind": "NeverType",
              "value": "never",
            },
            "kind": "TypeReturnStatement",
          },
          "condition": Object {
            "checkType": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "text",
              },
            },
            "extendsType": Object {
              "items": Array [
                Object {
                  "expression": Object {
                    "kind": "InferType",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "protocol",
                    },
                  },
                  "kind": "TemplateExpression",
                },
                Object {
                  "kind": "TemplateElement",
                  "value": "://",
                },
                Object {
                  "expression": Object {
                    "kind": "InferType",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "rest",
                    },
                  },
                  "kind": "TemplateExpression",
                },
              ],
              "kind": "TemplateTypeLiteral",
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "items": Array [
                Object {
                  "kind": "ObjectTypeLiteral",
                  "props": Array [
                    Object {
                      "kind": "TypeObjectProperty",
                      "name": Object {
                        "kind": "Identifier",
                        "name": "protocol",
                      },
                      "optional": false,
                      "readonly": false,
                      "value": Object {
                        "kind": "TypeReference",
                        "typeName": Object {
                          "kind": "Identifier",
                          "name": "protocol",
                        },
                      },
                    },
                  ],
                },
                Object {
                  "kind": "TypeReference",
                  "typeName": Object {
                    "kind": "Identifier",
                    "name": "rest",
                  },
                },
              ],
              "kind": "TupleType",
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "text",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "parseProtocol",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`parser: examples parseURL 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "argument": Object {
              "kind": "NeverType",
              "value": "never",
            },
            "kind": "TypeReturnStatement",
          },
          "condition": Object {
            "checkType": Object {
              "callee": Object {
                "kind": "TypeReference",
                "typeName": Object {
                  "kind": "Identifier",
                  "name": "parseProtocol",
                },
              },
              "kind": "TypeCallExpression",
              "params": Array [
                Object {
                  "kind": "TypeReference",
                  "typeName": Object {
                    "kind": "Identifier",
                    "name": "text",
                  },
                },
              ],
            },
            "extendsType": Object {
              "items": Array [
                Object {
                  "kind": "InferType",
                  "typeName": Object {
                    "kind": "Identifier",
                    "name": "protocol",
                  },
                },
                Object {
                  "kind": "InferType",
                  "typeName": Object {
                    "kind": "Identifier",
                    "name": "rest",
                  },
                },
              ],
              "kind": "TupleType",
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "kind": "ObjectTypeLiteral",
              "props": Array [
                Object {
                  "kind": "TypeSpreadProperty",
                  "param": Object {
                    "kind": "TypeReference",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "protocol",
                    },
                  },
                },
                Object {
                  "kind": "TypeSpreadProperty",
                  "param": Object {
                    "callee": Object {
                      "kind": "TypeReference",
                      "typeName": Object {
                        "kind": "Identifier",
                        "name": "parseAuthority",
                      },
                    },
                    "kind": "TypeCallExpression",
                    "params": Array [
                      Object {
                        "kind": "TypeReference",
                        "typeName": Object {
                          "kind": "Identifier",
                          "name": "rest",
                        },
                      },
                    ],
                  },
                },
              ],
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "text",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "parseURL",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`parser: examples parseURL: 2 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "argument": Object {
              "kind": "NeverType",
              "value": "never",
            },
            "kind": "TypeReturnStatement",
          },
          "condition": Object {
            "checkType": Object {
              "callee": Object {
                "kind": "TypeReference",
                "typeName": Object {
                  "kind": "Identifier",
                  "name": "parseProtocol",
                },
              },
              "kind": "TypeCallExpression",
              "params": Array [
                Object {
                  "kind": "TypeReference",
                  "typeName": Object {
                    "kind": "Identifier",
                    "name": "text",
                  },
                },
              ],
            },
            "extendsType": Object {
              "items": Array [
                Object {
                  "kind": "InferType",
                  "typeName": Object {
                    "kind": "Identifier",
                    "name": "protocol",
                  },
                },
                Object {
                  "kind": "InferType",
                  "typeName": Object {
                    "kind": "Identifier",
                    "name": "rest",
                  },
                },
              ],
              "kind": "TupleType",
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "kind": "ObjectTypeLiteral",
              "props": Array [
                Object {
                  "kind": "TypeObjectProperty",
                  "name": Object {
                    "kind": "Identifier",
                    "name": "protocol",
                  },
                  "optional": false,
                  "readonly": false,
                  "value": Object {
                    "kind": "TypeReference",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "protocol",
                    },
                  },
                },
                Object {
                  "kind": "TypeObjectProperty",
                  "name": Object {
                    "kind": "Identifier",
                    "name": "rest",
                  },
                  "optional": false,
                  "readonly": false,
                  "value": Object {
                    "kind": "TypeReference",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "rest",
                    },
                  },
                },
              ],
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "text",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "parseURL",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`parser: examples parseUserInfo 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "argument": Object {
              "kind": "ObjectTypeLiteral",
              "props": Array [
                Object {
                  "kind": "TypeObjectProperty",
                  "name": Object {
                    "kind": "Identifier",
                    "name": "username",
                  },
                  "optional": false,
                  "readonly": false,
                  "value": Object {
                    "kind": "TypeReference",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "text",
                    },
                  },
                },
              ],
            },
            "kind": "TypeReturnStatement",
          },
          "condition": Object {
            "checkType": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "text",
              },
            },
            "extendsType": Object {
              "items": Array [
                Object {
                  "expression": Object {
                    "kind": "InferType",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "username",
                    },
                  },
                  "kind": "TemplateExpression",
                },
                Object {
                  "kind": "TemplateElement",
                  "value": ":",
                },
                Object {
                  "expression": Object {
                    "kind": "InferType",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "password",
                    },
                  },
                  "kind": "TemplateExpression",
                },
              ],
              "kind": "TemplateTypeLiteral",
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "kind": "ObjectTypeLiteral",
              "props": Array [
                Object {
                  "kind": "TypeObjectProperty",
                  "name": Object {
                    "kind": "Identifier",
                    "name": "username",
                  },
                  "optional": false,
                  "readonly": false,
                  "value": Object {
                    "kind": "TypeReference",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "username",
                    },
                  },
                },
                Object {
                  "kind": "TypeObjectProperty",
                  "name": Object {
                    "kind": "Identifier",
                    "name": "password",
                  },
                  "optional": false,
                  "readonly": false,
                  "value": Object {
                    "kind": "TypeReference",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "password",
                    },
                  },
                },
              ],
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "text",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "parseUserInfo",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`parser: examples pick 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "as": Object {
            "kind": "TypeObjectProperty",
            "name": Object {
              "kind": "Identifier",
              "name": "key",
            },
            "optional": false,
            "readonly": false,
            "value": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "K",
              },
            },
          },
          "key": Object {
            "kind": "Identifier",
            "name": "K",
          },
          "keys": Object {
            "kind": "TypeReference",
            "typeName": Object {
              "kind": "Identifier",
              "name": "Keys",
            },
          },
          "kind": "TypeForInStatement",
          "value": Object {
            "head": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "T",
              },
            },
            "kind": "IndexType",
            "members": Array [
              Object {
                "kind": "TypeReference",
                "typeName": Object {
                  "kind": "Identifier",
                  "name": "K",
                },
              },
            ],
          },
        },
        "kind": "MappedTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "T",
          },
        },
        Object {
          "constraint": Object {
            "kind": "KeyOfType",
            "operand": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "T",
              },
            },
          },
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "Keys",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "pick",
    },
  },
  "export": true,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`parser: examples readonly 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "as": Object {
            "kind": "TypeObjectProperty",
            "name": Object {
              "kind": "Identifier",
              "name": "key",
            },
            "optional": false,
            "readonly": true,
            "value": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "K",
              },
            },
          },
          "key": Object {
            "kind": "Identifier",
            "name": "K",
          },
          "keys": Object {
            "kind": "KeyOfType",
            "operand": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "T",
              },
            },
          },
          "kind": "TypeForInStatement",
          "value": Object {
            "head": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "T",
              },
            },
            "kind": "IndexType",
            "members": Array [
              Object {
                "kind": "TypeReference",
                "typeName": Object {
                  "kind": "Identifier",
                  "name": "K",
                },
              },
            ],
          },
        },
        "kind": "MappedTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "T",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "MyReadonly",
    },
  },
  "export": true,
  "kind": "TypeFunctionDeclaration",
}
`;
