// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BasicType 1`] = `
Object {
  "kind": "NeverType",
  "value": "never",
}
`;

exports[`BasicType 2`] = `
Object {
  "kind": "StringType",
  "value": "string",
}
`;

exports[`BasicType 3`] = `
Object {
  "kind": "NumberType",
  "value": "number",
}
`;

exports[`BasicType 4`] = `
Object {
  "kind": "AnyType",
  "value": "any",
}
`;

exports[`BasicType 5`] = `
Object {
  "kind": "ObjectType",
  "value": "object",
}
`;

exports[`ConditionalTypeExpression 1`] = `
Object {
  "body": Object {
    "alternate": Object {
      "argument": Object {
        "kind": "StringTypeLiteral",
        "value": "number",
      },
      "kind": "TypeReturnStatement",
    },
    "condition": Object {
      "checkType": Object {
        "kind": "StringType",
        "value": "string",
      },
      "extendsType": Object {
        "kind": "StringType",
        "value": "string",
      },
      "kind": "ExtendsClause",
    },
    "consequent": Object {
      "argument": Object {
        "kind": "StringTypeLiteral",
        "value": "string",
      },
      "kind": "TypeReturnStatement",
    },
    "kind": "TypeIfStatement",
  },
  "kind": "ConditionalTypeExpression",
}
`;

exports[`ConditionalTypeExpression: 2 1`] = `
Object {
  "body": Object {
    "alternate": Object {
      "alternate": Object {
        "argument": Object {
          "kind": "NeverType",
          "value": "never",
        },
        "kind": "TypeReturnStatement",
      },
      "condition": Object {
        "checkType": Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "T",
          },
        },
        "extendsType": Object {
          "kind": "NumberType",
          "value": "number",
        },
        "kind": "ExtendsClause",
      },
      "consequent": Object {
        "argument": Object {
          "kind": "StringTypeLiteral",
          "value": "number",
        },
        "kind": "TypeReturnStatement",
      },
      "kind": "TypeIfStatement",
    },
    "condition": Object {
      "checkType": Object {
        "kind": "TypeReference",
        "typeName": Object {
          "kind": "Identifier",
          "name": "T",
        },
      },
      "extendsType": Object {
        "kind": "StringType",
        "value": "string",
      },
      "kind": "ExtendsClause",
    },
    "consequent": Object {
      "argument": Object {
        "kind": "StringTypeLiteral",
        "value": "string",
      },
      "kind": "TypeReturnStatement",
    },
    "kind": "TypeIfStatement",
  },
  "kind": "ConditionalTypeExpression",
}
`;

exports[`ExtendsClause 1`] = `
Object {
  "checkType": Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "T",
    },
  },
  "extendsType": Object {
    "kind": "StringType",
    "value": "string",
  },
  "kind": "ExtendsClause",
}
`;

exports[`ExtendsClause: type function call 1`] = `
Object {
  "checkType": Object {
    "callee": Object {
      "kind": "TypeReference",
      "typeName": Object {
        "kind": "Identifier",
        "name": "TypeName",
      },
    },
    "kind": "TypeCallExpression",
    "params": Array [
      Object {
        "kind": "TypeReference",
        "typeName": Object {
          "kind": "Identifier",
          "name": "T",
        },
      },
    ],
  },
  "extendsType": Object {
    "kind": "StringType",
    "value": "string",
  },
  "kind": "ExtendsClause",
}
`;

exports[`Identifier 1`] = `
Object {
  "kind": "Identifier",
  "name": "result",
}
`;

exports[`ImportDeclaration 1`] = `
Object {
  "kind": "ImportDeclaration",
  "source": "./temp",
  "specifiers": Array [
    Object {
      "imported": Object {
        "kind": "Identifier",
        "name": "Temp",
      },
      "kind": "ImportSpecifier",
    },
  ],
}
`;

exports[`ImportDeclaration: 2 1`] = `
Object {
  "kind": "ImportDeclaration",
  "source": "./temp",
  "specifiers": Array [
    Object {
      "imported": Object {
        "kind": "Identifier",
        "name": "Temp",
      },
      "kind": "ImportSpecifier",
    },
    Object {
      "imported": Object {
        "kind": "Identifier",
        "name": "Temp2",
      },
      "kind": "ImportSpecifier",
    },
  ],
}
`;

exports[`IndexType 1`] = `
Object {
  "head": Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "obj",
    },
  },
  "kind": "IndexType",
  "members": Array [
    Object {
      "kind": "StringTypeLiteral",
      "value": "a",
    },
  ],
}
`;

exports[`IndexType: deep 1`] = `
Object {
  "head": Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "obj",
    },
  },
  "kind": "IndexType",
  "members": Array [
    Object {
      "kind": "StringTypeLiteral",
      "value": "a",
    },
    Object {
      "kind": "NumberTypeLiteral",
      "value": 2,
    },
  ],
}
`;

exports[`InferType 1`] = `
Object {
  "kind": "InferType",
  "typeName": Object {
    "kind": "Identifier",
    "name": "protocol",
  },
}
`;

exports[`InferType 2`] = `"Expected InferType but \\"i\\" found."`;

exports[`KeyOfType 1`] = `
Object {
  "kind": "KeyOfType",
  "operand": Object {
    "kind": "ObjectTypeLiteral",
    "props": Array [
      Object {
        "kind": "TypeObjectProperty",
        "name": Object {
          "kind": "Identifier",
          "name": "a",
        },
        "optional": false,
        "readonly": false,
        "value": Object {
          "kind": "NumberTypeLiteral",
          "value": 1,
        },
      },
      Object {
        "kind": "TypeObjectProperty",
        "name": Object {
          "kind": "Identifier",
          "name": "b",
        },
        "optional": false,
        "readonly": false,
        "value": Object {
          "kind": "NumberTypeLiteral",
          "value": 2,
        },
      },
    ],
  },
}
`;

exports[`MappedType 1`] = `
Object {
  "body": Object {
    "as": Object {
      "kind": "TypeObjectProperty",
      "name": Object {
        "kind": "Identifier",
        "name": "key",
      },
      "optional": false,
      "readonly": false,
      "value": Object {
        "kind": "TypeReference",
        "typeName": Object {
          "kind": "Identifier",
          "name": "K",
        },
      },
    },
    "key": Object {
      "kind": "Identifier",
      "name": "K",
    },
    "keys": Object {
      "kind": "TypeReference",
      "typeName": Object {
        "kind": "Identifier",
        "name": "Keys",
      },
    },
    "kind": "TypeForInStatement",
    "value": Object {
      "kind": "TypeReference",
      "typeName": Object {
        "kind": "Identifier",
        "name": "boolean",
      },
    },
  },
  "kind": "MappedTypeExpression",
}
`;

exports[`MappedType: as 1`] = `
Object {
  "body": Object {
    "as": Object {
      "kind": "TypeObjectProperty",
      "name": Object {
        "kind": "Identifier",
        "name": "key",
      },
      "optional": false,
      "readonly": false,
      "value": Object {
        "items": Array [
          Object {
            "kind": "TemplateElement",
            "value": "get",
          },
          Object {
            "expression": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "K",
              },
            },
            "kind": "TemplateExpression",
          },
        ],
        "kind": "TemplateTypeLiteral",
      },
    },
    "key": Object {
      "kind": "Identifier",
      "name": "K",
    },
    "keys": Object {
      "kind": "TypeReference",
      "typeName": Object {
        "kind": "Identifier",
        "name": "Keys",
      },
    },
    "kind": "TypeForInStatement",
    "value": Object {
      "kind": "FunctionType",
      "params": Array [],
      "returnType": Object {
        "kind": "StringType",
        "value": "string",
      },
    },
  },
  "kind": "MappedTypeExpression",
}
`;

exports[`OperatorType: keyof 1`] = `
Object {
  "kind": "KeyOfType",
  "operand": Object {
    "kind": "ObjectTypeLiteral",
    "props": Array [
      Object {
        "kind": "TypeObjectProperty",
        "name": Object {
          "kind": "Identifier",
          "name": "a",
        },
        "optional": false,
        "readonly": false,
        "value": Object {
          "kind": "NumberTypeLiteral",
          "value": 1,
        },
      },
      Object {
        "kind": "TypeObjectProperty",
        "name": Object {
          "kind": "Identifier",
          "name": "b",
        },
        "optional": false,
        "readonly": false,
        "value": Object {
          "kind": "NumberTypeLiteral",
          "value": 2,
        },
      },
    ],
  },
}
`;

exports[`ParamList 1`] = `
Array [
  Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "protocol",
    },
  },
  Object {
    "constraint": Object {
      "kind": "NumberType",
      "value": "number",
    },
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "rest",
    },
  },
]
`;

exports[`ParamList 2`] = `
Array [
  Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "protocol",
    },
  },
]
`;

exports[`ParamList 3`] = `
Array [
  Object {
    "constraint": Object {
      "kind": "StringType",
      "value": "string",
    },
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "protocol",
    },
  },
]
`;

exports[`ParamList: empty 1`] = `Array []`;

exports[`ParenthesizedType 1`] = `
Object {
  "kind": "ParenthesizedType",
  "param": Object {
    "kind": "FunctionType",
    "params": Array [
      Object {
        "kind": "FunctionTypeParam",
        "name": Object {
          "kind": "Identifier",
          "name": "value",
        },
        "type": Object {
          "kind": "NumberType",
          "value": "number",
        },
      },
    ],
    "returnType": Object {
      "kind": "VoidType",
      "value": "void",
    },
  },
}
`;

exports[`TemplateElement 1`] = `
Object {
  "kind": "TemplateElement",
  "value": "hello  ",
}
`;

exports[`TemplateExpression 1`] = `
Object {
  "expression": Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "World",
    },
  },
  "kind": "TemplateExpression",
}
`;

exports[`TemplateTypeLiteral 1`] = `
Object {
  "items": Array [
    Object {
      "kind": "TemplateElement",
      "value": "hello ",
    },
    Object {
      "expression": Object {
        "kind": "TypeReference",
        "typeName": Object {
          "kind": "Identifier",
          "name": "World",
        },
      },
      "kind": "TemplateExpression",
    },
  ],
  "kind": "TemplateTypeLiteral",
}
`;

exports[`TemplateTypeLiteral 2`] = `
Object {
  "items": Array [
    Object {
      "kind": "TemplateElement",
      "value": "    hello ",
    },
    Object {
      "expression": Object {
        "kind": "TypeReference",
        "typeName": Object {
          "kind": "Identifier",
          "name": "World",
        },
      },
      "kind": "TemplateExpression",
    },
    Object {
      "kind": "TemplateElement",
      "value": " and ",
    },
    Object {
      "expression": Object {
        "kind": "TypeReference",
        "typeName": Object {
          "kind": "Identifier",
          "name": "Temp",
        },
      },
      "kind": "TemplateExpression",
    },
    Object {
      "expression": Object {
        "kind": "TypeReference",
        "typeName": Object {
          "kind": "Identifier",
          "name": "Test",
        },
      },
      "kind": "TemplateExpression",
    },
    Object {
      "kind": "TemplateElement",
      "value": "    ",
    },
  ],
  "kind": "TemplateTypeLiteral",
}
`;

exports[`TemplateTypeLiteral 3`] = `
Object {
  "items": Array [],
  "kind": "TemplateTypeLiteral",
}
`;

exports[`TemplateTypeLiteral 4`] = `
Object {
  "items": Array [
    Object {
      "expression": Object {
        "kind": "InferType",
        "typeName": Object {
          "kind": "Identifier",
          "name": "authority",
        },
      },
      "kind": "TemplateExpression",
    },
    Object {
      "kind": "TemplateElement",
      "value": "@",
    },
    Object {
      "expression": Object {
        "kind": "InferType",
        "typeName": Object {
          "kind": "Identifier",
          "name": "rest",
        },
      },
      "kind": "TemplateExpression",
    },
  ],
  "kind": "TemplateTypeLiteral",
}
`;

exports[`TemplateTypeLiteral 5`] = `
Object {
  "items": Array [
    Object {
      "kind": "TemplateElement",
      "value": "\\\\\`",
    },
  ],
  "kind": "TemplateTypeLiteral",
}
`;

exports[`TypeArrowFunctionExpression 1`] = `
Object {
  "body": Object {
    "body": Object {
      "alternate": Object {
        "argument": Object {
          "kind": "StringTypeLiteral",
          "value": "number",
        },
        "kind": "TypeReturnStatement",
      },
      "condition": Object {
        "checkType": Object {
          "kind": "StringType",
          "value": "string",
        },
        "extendsType": Object {
          "kind": "StringType",
          "value": "string",
        },
        "kind": "ExtendsClause",
      },
      "consequent": Object {
        "argument": Object {
          "kind": "StringTypeLiteral",
          "value": "string",
        },
        "kind": "TypeReturnStatement",
      },
      "kind": "TypeIfStatement",
    },
    "kind": "ConditionalTypeExpression",
  },
  "kind": "TypeArrowFunctionExpression",
  "params": Array [],
}
`;

exports[`TypeArrowFunctionExpression: with infer 1`] = `
Object {
  "body": Object {
    "body": Object {
      "alternate": Object {
        "argument": Object {
          "kind": "StringTypeLiteral",
          "value": "number",
        },
        "kind": "TypeReturnStatement",
      },
      "condition": Object {
        "checkType": Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "T",
          },
        },
        "extendsType": Object {
          "kind": "InferType",
          "typeName": Object {
            "kind": "Identifier",
            "name": "U",
          },
        },
        "kind": "ExtendsClause",
      },
      "consequent": Object {
        "argument": Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "U",
          },
        },
        "kind": "TypeReturnStatement",
      },
      "kind": "TypeIfStatement",
    },
    "kind": "ConditionalTypeExpression",
  },
  "kind": "TypeArrowFunctionExpression",
  "params": Array [],
}
`;

exports[`TypeArrowFunctionExpression: with params 1`] = `
Object {
  "body": Object {
    "body": Object {
      "alternate": Object {
        "argument": Object {
          "kind": "StringTypeLiteral",
          "value": "number",
        },
        "kind": "TypeReturnStatement",
      },
      "condition": Object {
        "checkType": Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "T",
          },
        },
        "extendsType": Object {
          "kind": "StringType",
          "value": "string",
        },
        "kind": "ExtendsClause",
      },
      "consequent": Object {
        "argument": Object {
          "kind": "StringTypeLiteral",
          "value": "string",
        },
        "kind": "TypeReturnStatement",
      },
      "kind": "TypeIfStatement",
    },
    "kind": "ConditionalTypeExpression",
  },
  "kind": "TypeArrowFunctionExpression",
  "params": Array [
    Object {
      "kind": "TypeReference",
      "typeName": Object {
        "kind": "Identifier",
        "name": "T",
      },
    },
  ],
}
`;

exports[`TypeCallExpression 1`] = `
Object {
  "callee": Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "ParseProtocol",
    },
  },
  "kind": "TypeCallExpression",
  "params": Array [
    Object {
      "kind": "TypeReference",
      "typeName": Object {
        "kind": "Identifier",
        "name": "T",
      },
    },
  ],
}
`;

exports[`TypeCallExpression 2`] = `
Object {
  "callee": Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "ParseProtocol",
    },
  },
  "kind": "TypeCallExpression",
  "params": Array [
    Object {
      "kind": "StringTypeLiteral",
      "value": "https://...",
    },
  ],
}
`;

exports[`TypeCallExpression: empty 1`] = `
Object {
  "callee": Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "ParseProtocol",
    },
  },
  "kind": "TypeCallExpression",
  "params": Array [],
}
`;

exports[`TypeExpressionList 1`] = `
Array [
  Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "protocol",
    },
  },
  Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "rest",
    },
  },
]
`;

exports[`TypeExpressionList 2`] = `
Array [
  Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "protocol",
    },
  },
]
`;

exports[`TypeExpressionList 3`] = `Array []`;

exports[`TypeFile 1`] = `
Object {
  "body": Array [
    Object {
      "declarator": Object {
        "initializer": Object {
          "kind": "StringType",
          "value": "string",
        },
        "kind": "TypeVariableDeclarator",
        "name": Object {
          "kind": "Identifier",
          "name": "temp",
        },
      },
      "export": false,
      "kind": "TypeVariableDeclaration",
    },
    Object {
      "declarator": Object {
        "initializer": Object {
          "body": Object {
            "kind": "ObjectTypeLiteral",
            "props": Array [
              Object {
                "kind": "TypeObjectProperty",
                "name": Object {
                  "kind": "Identifier",
                  "name": "a",
                },
                "optional": false,
                "readonly": false,
                "value": Object {
                  "kind": "TypeReference",
                  "typeName": Object {
                    "kind": "Identifier",
                    "name": "T",
                  },
                },
              },
            ],
          },
          "kind": "TypeArrowFunctionExpression",
          "params": Array [
            Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "T",
              },
            },
          ],
        },
        "kind": "TypeFunctionDeclarator",
        "name": Object {
          "kind": "Identifier",
          "name": "func",
        },
      },
      "export": false,
      "kind": "TypeFunctionDeclaration",
    },
  ],
  "kind": "TypeFile",
}
`;

exports[`TypeForInStatement 1`] = `
Object {
  "as": Object {
    "kind": "TypeObjectProperty",
    "name": Object {
      "kind": "Identifier",
      "name": "key",
    },
    "optional": false,
    "readonly": false,
    "value": Object {
      "kind": "TypeReference",
      "typeName": Object {
        "kind": "Identifier",
        "name": "K",
      },
    },
  },
  "key": Object {
    "kind": "Identifier",
    "name": "K",
  },
  "keys": Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "Keys",
    },
  },
  "kind": "TypeForInStatement",
  "value": Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "boolean",
    },
  },
}
`;

exports[`TypeForInStatement: 2 1`] = `
Object {
  "as": Object {
    "kind": "TypeObjectProperty",
    "name": Object {
      "kind": "Identifier",
      "name": "key",
    },
    "optional": false,
    "readonly": false,
    "value": Object {
      "items": Array [
        Object {
          "kind": "TemplateElement",
          "value": "get",
        },
        Object {
          "expression": Object {
            "kind": "TypeReference",
            "typeName": Object {
              "kind": "Identifier",
              "name": "K",
            },
          },
          "kind": "TemplateExpression",
        },
      ],
      "kind": "TemplateTypeLiteral",
    },
  },
  "key": Object {
    "kind": "Identifier",
    "name": "K",
  },
  "keys": Object {
    "kind": "TypeReference",
    "typeName": Object {
      "kind": "Identifier",
      "name": "Keys",
    },
  },
  "kind": "TypeForInStatement",
  "value": Object {
    "kind": "FunctionType",
    "params": Array [],
    "returnType": Object {
      "kind": "StringType",
      "value": "string",
    },
  },
}
`;

exports[`TypeFunctionDeclaration 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "argument": Object {
              "kind": "StringTypeLiteral",
              "value": "number",
            },
            "kind": "TypeReturnStatement",
          },
          "condition": Object {
            "checkType": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "T",
              },
            },
            "extendsType": Object {
              "kind": "StringType",
              "value": "string",
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "kind": "StringTypeLiteral",
              "value": "string",
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "T",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "TypeName",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`TypeFunctionDeclaration: default param 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "argument": Object {
              "kind": "StringTypeLiteral",
              "value": "number",
            },
            "kind": "TypeReturnStatement",
          },
          "condition": Object {
            "checkType": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "T",
              },
            },
            "extendsType": Object {
              "kind": "StringType",
              "value": "string",
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "kind": "StringTypeLiteral",
              "value": "string",
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "default": Object {
            "kind": "AnyType",
            "value": "any",
          },
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "T",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "TypeName",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`TypeFunctionDeclaration: export 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "argument": Object {
              "kind": "StringTypeLiteral",
              "value": "number",
            },
            "kind": "TypeReturnStatement",
          },
          "condition": Object {
            "checkType": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "T",
              },
            },
            "extendsType": Object {
              "kind": "StringType",
              "value": "string",
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "kind": "StringTypeLiteral",
              "value": "string",
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "T",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "TypeName",
    },
  },
  "export": true,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`TypeFunctionDeclaration: with TemplateTypeLiteral 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "argument": Object {
              "kind": "StringTypeLiteral",
              "value": "number",
            },
            "kind": "TypeReturnStatement",
          },
          "condition": Object {
            "checkType": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "text",
              },
            },
            "extendsType": Object {
              "items": Array [
                Object {
                  "expression": Object {
                    "kind": "InferType",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "protocol",
                    },
                  },
                  "kind": "TemplateExpression",
                },
                Object {
                  "kind": "TemplateElement",
                  "value": "://",
                },
                Object {
                  "expression": Object {
                    "kind": "InferType",
                    "typeName": Object {
                      "kind": "Identifier",
                      "name": "rest",
                    },
                  },
                  "kind": "TemplateExpression",
                },
              ],
              "kind": "TemplateTypeLiteral",
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "kind": "StringTypeLiteral",
              "value": "string",
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "text",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "ParseProtocol",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`TypeFunctionDeclaration: with infer 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "body": Object {
          "alternate": Object {
            "argument": Object {
              "kind": "StringTypeLiteral",
              "value": "number",
            },
            "kind": "TypeReturnStatement",
          },
          "condition": Object {
            "checkType": Object {
              "kind": "TypeReference",
              "typeName": Object {
                "kind": "Identifier",
                "name": "text",
              },
            },
            "extendsType": Object {
              "kind": "InferType",
              "typeName": Object {
                "kind": "Identifier",
                "name": "protocal",
              },
            },
            "kind": "ExtendsClause",
          },
          "consequent": Object {
            "argument": Object {
              "kind": "StringTypeLiteral",
              "value": "string",
            },
            "kind": "TypeReturnStatement",
          },
          "kind": "TypeIfStatement",
        },
        "kind": "ConditionalTypeExpression",
      },
      "kind": "TypeArrowFunctionExpression",
      "params": Array [
        Object {
          "kind": "TypeReference",
          "typeName": Object {
            "kind": "Identifier",
            "name": "text",
          },
        },
      ],
    },
    "kind": "TypeFunctionDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "ParseURL",
    },
  },
  "export": false,
  "kind": "TypeFunctionDeclaration",
}
`;

exports[`TypeIfStatement 1`] = `
Object {
  "alternate": Object {
    "argument": Object {
      "kind": "StringTypeLiteral",
      "value": "number",
    },
    "kind": "TypeReturnStatement",
  },
  "condition": Object {
    "checkType": Object {
      "kind": "TypeReference",
      "typeName": Object {
        "kind": "Identifier",
        "name": "T",
      },
    },
    "extendsType": Object {
      "kind": "StringType",
      "value": "string",
    },
    "kind": "ExtendsClause",
  },
  "consequent": Object {
    "argument": Object {
      "kind": "StringTypeLiteral",
      "value": "string",
    },
    "kind": "TypeReturnStatement",
  },
  "kind": "TypeIfStatement",
}
`;

exports[`TypeIfStatement 2`] = `
Object {
  "alternate": Object {
    "argument": Object {
      "kind": "StringTypeLiteral",
      "value": "number",
    },
    "kind": "TypeReturnStatement",
  },
  "condition": Object {
    "checkType": Object {
      "kind": "TypeReference",
      "typeName": Object {
        "kind": "Identifier",
        "name": "T",
      },
    },
    "extendsType": Object {
      "kind": "StringType",
      "value": "string",
    },
    "kind": "ExtendsClause",
  },
  "consequent": Object {
    "argument": Object {
      "kind": "StringTypeLiteral",
      "value": "string",
    },
    "kind": "TypeReturnStatement",
  },
  "kind": "TypeIfStatement",
}
`;

exports[`TypeReturnStatement 1`] = `
Object {
  "argument": Object {
    "kind": "StringType",
    "value": "string",
  },
  "kind": "TypeReturnStatement",
}
`;

exports[`TypeVariableDeclaration 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "kind": "StringType",
      "value": "string",
    },
    "kind": "TypeVariableDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "result",
    },
  },
  "export": false,
  "kind": "TypeVariableDeclaration",
}
`;

exports[`TypeVariableDeclaration: 2 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "kind": "NumberTypeLiteral",
      "value": 1,
    },
    "kind": "TypeVariableDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "result",
    },
  },
  "export": false,
  "kind": "TypeVariableDeclaration",
}
`;

exports[`TypeVariableDeclaration: conditional type 1`] = `"Expected TypeVariableDeclaration but \\"\\\\n\\" found."`;

exports[`TypeVariableDeclaration: conditional type 2`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "alternate": Object {
          "argument": Object {
            "kind": "NumberType",
            "value": "number",
          },
          "kind": "TypeReturnStatement",
        },
        "condition": Object {
          "checkType": Object {
            "kind": "StringType",
            "value": "string",
          },
          "extendsType": Object {
            "kind": "StringType",
            "value": "string",
          },
          "kind": "ExtendsClause",
        },
        "consequent": Object {
          "argument": Object {
            "kind": "StringType",
            "value": "string",
          },
          "kind": "TypeReturnStatement",
        },
        "kind": "TypeIfStatement",
      },
      "kind": "ConditionalTypeExpression",
    },
    "kind": "TypeVariableDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "result",
    },
  },
  "export": false,
  "kind": "TypeVariableDeclaration",
}
`;

exports[`TypeVariableDeclaration: context type 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "body": Object {
        "context": "use js",
        "source": "const type = \\"1\\";
            return type;
        ",
      },
      "kind": "ContextType",
    },
    "kind": "TypeVariableDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "result",
    },
  },
  "export": false,
  "kind": "TypeVariableDeclaration",
}
`;

exports[`TypeVariableDeclaration: export 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "kind": "StringType",
      "value": "string",
    },
    "kind": "TypeVariableDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "result",
    },
  },
  "export": true,
  "kind": "TypeVariableDeclaration",
}
`;

exports[`TypeVariableDeclaration: function 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "kind": "FunctionType",
      "params": Array [
        Object {
          "kind": "FunctionTypeParam",
          "name": Object {
            "kind": "Identifier",
            "name": "a",
          },
          "type": Object {
            "kind": "NumberType",
            "value": "number",
          },
        },
        Object {
          "kind": "FunctionTypeParam",
          "name": Object {
            "kind": "Identifier",
            "name": "b",
          },
          "type": Object {
            "kind": "StringType",
            "value": "string",
          },
        },
      ],
      "returnType": Object {
        "kind": "VoidType",
        "value": "void",
      },
    },
    "kind": "TypeVariableDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "result",
    },
  },
  "export": false,
  "kind": "TypeVariableDeclaration",
}
`;

exports[`TypeVariableDeclaration: keyof 1`] = `
Object {
  "declarator": Object {
    "initializer": Object {
      "kind": "KeyOfType",
      "operand": Object {
        "kind": "ObjectTypeLiteral",
        "props": Array [
          Object {
            "kind": "TypeObjectProperty",
            "name": Object {
              "kind": "Identifier",
              "name": "a",
            },
            "optional": false,
            "readonly": false,
            "value": Object {
              "kind": "NumberTypeLiteral",
              "value": 1,
            },
          },
          Object {
            "kind": "TypeObjectProperty",
            "name": Object {
              "kind": "Identifier",
              "name": "b",
            },
            "optional": false,
            "readonly": false,
            "value": Object {
              "kind": "NumberTypeLiteral",
              "value": 2,
            },
          },
        ],
      },
    },
    "kind": "TypeVariableDeclarator",
    "name": Object {
      "kind": "Identifier",
      "name": "result",
    },
  },
  "export": false,
  "kind": "TypeVariableDeclaration",
}
`;
