// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`declaration TypeFunctionDeclaration 1`] = `"type TypeName<T> = T extends string ? \\"string\\" : \\"number\\";"`;

exports[`declaration TypeFunctionDeclaration: export 1`] = `"export type TypeName<T> = T extends string ? \\"string\\" : \\"number\\";"`;

exports[`declaration TypeVariableDeclaration 1`] = `"type result = string;"`;

exports[`declaration TypeVariableDeclaration: conditional type 1`] = `"type result = string extends string ? string : number;"`;

exports[`declaration TypeVariableDeclaration: export 1`] = `"export type result = string;"`;

exports[`declaration TypeVariableDeclaration: function 1`] = `"type result = (a: number, b: string) => void;"`;

exports[`declaration TypeVariableDeclaration: keyof 1`] = `
"type result = keyof {
  a: 1;
  b: 2;
};"
`;

exports[`examples _isNumberString 1`] = `"type _isNumberString<text> = text extends \\"\\" ? true : text extends \`\${infer digit}\${infer rest}\` ? digit extends Digit ? _isNumberString<rest> : false : false;"`;

exports[`examples isNumberString 1`] = `"type isNumberString<text> = text extends \\"\\" ? never : _isNumberString<text>;"`;

exports[`examples parseAuthority 1`] = `
"type parseAuthority<text> = text extends \`\${infer authority}@\${infer rest}\` ? {
  authority: parseUserInfo<authority>;
  rest: rest;
} : {
  authority: null;
  rest: text;
};"
`;

exports[`examples parseHost 1`] = `
"type parseHost<text> = text extends \`\${infer name}:\${infer port}\` ? parsePort<port> extends never ? never : {
  name: name;
  port: port;
} : {
  name: text;
};"
`;

exports[`examples parsePort 1`] = `"type parsePort<text> = isNumberString<text> extends true ? text : never;"`;

exports[`examples parseProtocol 1`] = `
"type parseProtocol<text> = text extends \`\${infer protocol}://\${infer rest}\` ? [{
  protocol: protocol;
}, rest] : never;"
`;

exports[`examples parseURL 1`] = `"type parseURL<text> = parseProtocol<text> extends [infer protocol, infer rest] ? object$assign<{}, [protocol, parseAuthority<rest>]> : never;"`;

exports[`examples parseURL: 2 1`] = `
"type parseURL<text> = parseProtocol<text> extends [infer protocol, infer rest] ? {
  protocol: protocol;
  rest: rest;
} : never;"
`;

exports[`examples parseUserInfo 1`] = `
"type parseUserInfo<text> = text extends \`\${infer username}:\${infer password}\` ? {
  username: username;
  password: password;
} : {
  username: text;
};"
`;

exports[`examples pick 1`] = `"export type pick<T, Keys extends keyof T> = { [K in Keys]: T[K] };"`;

exports[`examples readonly 1`] = `"export type MyReadonly<T> = { readonly [K in keyof T]: T[K] };"`;

exports[`ts-type ArrayType 1`] = `"string[]"`;

exports[`ts-type ArrayType: any 1`] = `"any[]"`;

exports[`ts-type ArrayType: deep 1`] = `"string[][]"`;

exports[`ts-type ConditionalTypeExpression 1`] = `"string extends string ? \\"string\\" : \\"number\\""`;

exports[`ts-type ConditionalTypeExpression: 2 1`] = `"T extends string ? \\"string\\" : T extends number ? \\"number\\" : never"`;

exports[`ts-type FunctionType 1`] = `"() => void"`;

exports[`ts-type FunctionType: nested 1`] = `"() => (a: number, b: string) => void"`;

exports[`ts-type FunctionType: params 1`] = `"(a: number, b: string) => number"`;

exports[`ts-type IndexType 1`] = `"obj[\\"a\\"]"`;

exports[`ts-type IndexType: deep 1`] = `"obj[\\"a\\"][2]"`;

exports[`ts-type IntersectionType 1`] = `"\\"0\\" & \\"1\\""`;

exports[`ts-type MappedType 1`] = `"{ [K in Keys]: boolean }"`;

exports[`ts-type MappedType: as 1`] = `"{ [K in Keys as \`get\${K}\`]: () => string }"`;

exports[`ts-type ObjectType 1`] = `
"{
  a: number;
  b: string;
  c: 1;
  d: \\"abc\\";
}"
`;

exports[`ts-type ObjectType: modifier 1`] = `
"{
  readonly a?: number;
}"
`;

exports[`ts-type ObjectType: shorthand 1`] = `
"{
  hello: hello;
}"
`;

exports[`ts-type ObjectType: spread 1`] = `
"object$assign<{}, [{
  hello: hello;
}, obj]>"
`;

exports[`ts-type TemplateTypeLiteral 1`] = `"\`hello \${World}\`"`;

exports[`ts-type TupleType: with infer 1`] = `"[infer protocol, infer rest]"`;

exports[`ts-type TypeArrowFunctionExpression 1`] = `"string extends string ? \\"string\\" : \\"number\\""`;

exports[`ts-type TypeArrowFunctionExpression: with infer 1`] = `"T extends infer U ? U : \\"number\\""`;

exports[`ts-type TypeArrowFunctionExpression: with params 1`] = `"T extends string ? \\"string\\" : \\"number\\""`;

exports[`ts-type UnionType 1`] = `"\\"0\\" | \\"1\\""`;

exports[`type file TypeFile 1`] = `
"type temp = string;
type func<T> = {
  a: T;
};"
`;
